---
name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
  merge_group:
  schedule:
    - cron: "0 14 * * 1" # Every Monday at 9 A.M. CST.
  workflow_dispatch:

env:
  CI: true
  GODOT_VERSION: "4.2.1"
  GDTOOLKIT_VERSION: "4.2.2"
  DENO_VERSION: "v1.40.3"

permissions:
  contents: read

jobs:
  build:
    name: Build
    needs: []
    timeout-minutes: ${{ (matrix.target == 'web') && 5 || 10 }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        target:
          - web
          # - macos
        include:
          - target: web
            os: ubuntu-latest
            godot-flags: --export-release "Web" build/index.html
          # - target: macos
          #   os: macos-latest
          #   godot-flags: --export-release "OS X"

    steps:
      - name: 📚 Git checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          submodules: recursive
          clean: true
          persist-credentials: false
          set-safe-directory: true
      - name: 🤖 Set up Godot
        uses: chickensoft-games/setup-godot@1dc3741f474fcf64a3b302d5fdd263010c200866 # v2.0.0
        with:
          version: ${{ env.GODOT_VERSION }}
          use-dotnet: false
          include-templates: true
      - name: 🔬 Verify setup
        run: godot --version
      - name: 🔌 Make and delete directories
        run: mkdir build/ && rm -rf addons/{godot-git-plugin,wakatime}
      - name: 🔧 Build
        run: godot --headless ${{ matrix.godot-flags }}
      - name: ⚙️ Upload build
        if: matrix.target == 'web'
        uses: actions/upload-artifact@1746f4ab65b179e0ea60a494b83293b640dd5bba # v4.3.2
        with:
          name: build-${{ matrix.target }}
          path: "./build"
          if-no-files-found: error

  lint:
    name: Linting
    needs: []
    timeout-minutes: 5
    runs-on: ubuntu-latest

    steps:
      - name: 📚 Git checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          submodules: recursive
          clean: true
          persist-credentials: false
          set-safe-directory: true
      - name: 🤖 Set up Godot
        uses: Scony/godot-gdscript-toolkit@9c4fa1cd596149d71e9d867416f3bb7b3a2fed3e # 4.2.2
        with:
          version: ${{ env.GDTOOLKIT_VERSION }}
      - name: 🔬 Verify setup
        run: gdparse --version
      - name: 🕵️ Analyze project source
        run: gdlint .

  format:
    name: Formatting
    needs: []
    timeout-minutes: 3
    runs-on: ubuntu-latest

    steps:
      - name: 📚 Git checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          submodules: recursive
          clean: true
          persist-credentials: false
          set-safe-directory: true
      - name: 🤖 Set up Godot
        uses: Scony/godot-gdscript-toolkit@cbd7a1dcff14cd272787a4ca497c7ff328714a6c # master
        with:
          version: ${{ env.GDTOOLKIT_VERSION }}
      - name: 🔬 Verify setup
        run: gdparse --version
      - name: ✨ Verify formatting
        run: gdformat --check $(find . -name '*.gd' -not -path "./addons/*")

  check:
    name: Check TS
    needs: []
    runs-on: ubuntu-latest
    timeout-minutes: 2
    permissions:
      pull-requests: write # Needed for Biome PR comments.

    steps:
      - name: 📚 Git checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          submodules: recursive
          clean: true
          persist-credentials: false
          set-safe-directory: true
      - name: 🦕 Install Deno
        uses: denoland/setup-deno@041b854f97b325bd60e53e9dc2de9cb9f9ac0cba # v1.1.4
        with:
          deno-version: ${{ env.DENO_VERSION }}
      - name: 🕵️ Run linter, verify formatting, typecheck
        run: deno task ci
      - name: 🧪 Run tests
        run: deno task test
      - name: 📊 Collect coverage
        run: deno task test:coverage

  deploy:
    name: Deploy to Deno Deploy
    needs: [build, check]
    runs-on: ubuntu-latest
    timeout-minutes: 2
    permissions:
      id-token: write # Needed to authenticate with Deno Deploy.
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: 📚 Git checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          submodules: recursive
          clean: true
          persist-credentials: false
          set-safe-directory: true
      - name: ⚙️ Download build
        uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d # v4.1.5
        with:
          name: build-web
          path: "./build"
      - name: 🔧 Deploy
        uses: denoland/deployctl@612f83df2b874c6908d68de5cf3f36a6538fa8f7 # 1.12.0
        with:
          project: "wizards-in-calculus"
          entrypoint: server/server.ts
          include: |
            server
            build
            deno.json
            deno.lock
